Microsoft (R) Macro Assembler Version 14.14.26430.0	    06/10/18 23:41:13
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
main.asm(4) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess PROTO, dwExitCode: DWORD

 00000000			.data
 = 00001000			MAX = 4096
 00000000 00000000		inputHandle HANDLE ?
 00000004  00000050 [		fileName BYTE 80 DUP(?)
	    00
	   ]
 00000054  00001000 [		buffer BYTE MAX DUP(?)	
	    00
	   ]
 00001054 00000000		bytesRead DWORD ?
 00001058  00001000 [		AfterSyntaxCheck BYTE Max DUP(?)
	    00
	   ]
 00002058 5B 5D 2B 2D 3C	ValidCharacter BYTE '[' ,']' ,'+' ,'-' ,'<' ,'>' ,',' ,'.'
	   3E 2C 2E
 00002060 AC 41 B8 B9 BC	ErrMsg BYTE "括號數量不對稱",0ah,0dh,0
	   C6 B6 71 A4 A3
	   B9 EF BA D9 0A
	   0D 00

				;------------------------------
				; ExecuteCode proceduce used variable
 00002071  00001000 [		executeMemory BYTE MAX DUP(0)
	    00
	   ]
 00003071 00000000		executeMemoryLocation DWORD ?
 00003075 00000000		codeLocation DWORD ?
 00003079 00			whileCheck SBYTE ?
 0000307A 53 79 6E 74 61	whileError BYTE "Syntax Error: while",0
	   78 20 45 72 72
	   6F 72 3A 20 77
	   68 69 6C 65 00
				;-------------------------------

 00000000			.code

 00000000			SyntaxCheck proc 
					; []+-.<>,
 00000000  B9 00001000			mov ecx,SIZEOF buffer
 00000005  BE 00000054 R		mov esi,OFFSET buffer
 0000000A  BF 00001058 R		mov edi,OFFSET AfterSyntaxCheck
 0000000F  BA 00000000			mov edx,0
 00000014				L1:
 00000014  8A 06				mov al,[esi]
						.IF al=='['
 00000016  3C 5B	   *	    cmp    al, '['
 00000018  75 04	   *	    jne    @C0001
 0000001A  FE C6						inc dh
						.ELSEIF al==']'
 0000001C  EB 06	   *	    jmp    @C0003
 0000001E		   *@C0001:
 0000001E  3C 5D	   *	    cmp    al, ']'
 00000020  75 02	   *	    jne    @C0004
 00000022  FE C2						inc dl
						.ENDIF
 00000024		   *@C0004:
 00000024		   *@C0003:
						.IF dl>dh
 00000024  3A D6	   *	    cmp    dl, dh
 00000026  76 02	   *	    jbe    @C0006
 00000028  EB 27					jmp Err	
						.ENDIF
 0000002A		   *@C0006:
						
 0000002A  46					inc esi
 0000002B  56					push esi
 0000002C  51					push ecx
 0000002D  B9 00000008				mov ecx,8
 00000032  BE 00002058 R			mov esi,OFFSET ValidCharacter
 00000037					L2:
 00000037  8A 1E					mov bl,[esi]
 00000039  46						inc esi
 0000003A  3A C3					cmp	al,bl
 0000003C  75 05					jne InValid

 0000003E  56						push esi
 0000003F  88 1F					mov [edi],bl
 00000041  47						inc edi
 00000042  5E						pop esi
							;call WaitMsg
 00000043						InValid:
 00000043  E2 F2				loop L2
 00000045  59					pop ecx
 00000046  5E					pop esi
 00000047  E2 CB			loop L1
 00000049  B3 00			mov bl,0
 0000004B  88 1F			mov [edi],bl
					.IF dl!=dh
 0000004D  3A D6	   *	    cmp    dl, dh
 0000004F  74 0A	   *	    je	@C0008
 00000051					Err:
 00000051  BA 00002060 R			mov edx,OFFSET ErrMsg
 00000056  E8 00000000 E			call WriteString
					.ENDIF
 0000005B		   *@C0008:
 0000005B  C3				ret
 0000005C			SyntaxCheck endp



				;-------------------------------------------------------------
 0000005C			ReadFileName proc uses eax ecx edx
				;
				; Read a file content into buffer string.
				;-------------------------------------------------------------
 0000005C  50		   *	    push   eax
 0000005D  51		   *	    push   ecx
 0000005E  52		   *	    push   edx
 0000005F  BA 00000004 R		mov edx, OFFSET fileName
 00000064  B9 00000050			mov ecx, SIZEOF fileName
 00000069  E8 00000000 E		call ReadString

 0000006E  BA 00000004 R		mov edx, OFFSET fileName
 00000073  E8 00000000 E		call OpenInputFile

 00000078  BA 00000054 R		mov edx, OFFSET buffer
 0000007D  B9 00001000			mov ecx, SIZEOF buffer
 00000082  E8 00000000 E		call ReadFromFile
 00000087  A3 00001054 R		mov bytesRead, eax
					ret
 0000008C  5A		   *	    pop    edx
 0000008D  59		   *	    pop    ecx
 0000008E  58		   *	    pop    eax
 0000008F  C3		   *	    ret    00000h
 00000090			ReadFileName endp

				;-------------------
				; BFInterpret proceduce
				; Receive: edx(buffer offset with just bf code)
				; Return: Nothing
				; -------------------
 00000090			BFInterpret proc
 00000090  89 15 00003075 R		mov codeLocation, edx
 00000096  B8 00002071 R		mov eax, OFFSET executeMemory
 0000009B  A3 00003071 R		mov executeMemoryLocation, eax

 000000A0			Loop1:
 000000A0  A1 00003075 R	     mov eax, codeLocation
 000000A5  8A 00			mov al, [eax]
					.IF al == 0
 000000A7  0A C0	   *	    or	al, al
 000000A9  75 0A	   *	    jne    @C000A
 000000AB  E9 0000016A				jmp Return
					.ELSEIF al == '>'
 000000B0  E9 000000F0	   *	    jmp    @C000C
 000000B5		   *@C000A:
 000000B5  3C 3E	   *	    cmp    al, '>'
 000000B7  75 17	   *	    jne    @C000D
 000000B9  8B 1D 00003071 R			mov ebx, [executeMemoryLocation]
 000000BF  43					inc ebx
 000000C0  89 1D 00003071 R			mov [executeMemoryLocation], ebx
 000000C6  E9 0000013D				jmp CodeLoop
					.ELSEIF al == '<'
 000000CB  E9 000000D5	   *	    jmp    @C000F
 000000D0		   *@C000D:
 000000D0  3C 3C	   *	    cmp    al, '<'
 000000D2  75 17	   *	    jne    @C0010
 000000D4  8B 1D 00003071 R			mov ebx, [executeMemoryLocation]
 000000DA  4B					dec ebx
 000000DB  89 1D 00003071 R			mov [executeMemoryLocation], ebx
 000000E1  E9 00000122				jmp CodeLoop
					.ELSEIF al == '+'
 000000E6  E9 000000BA	   *	    jmp    @C0012
 000000EB		   *@C0010:
 000000EB  3C 2B	   *	    cmp    al, '+'
 000000ED  75 15	   *	    jne    @C0013
 000000EF  A1 00003071 R			mov eax, [executeMemoryLocation]
 000000F4  8A 18		          mov bl, [eax]
 000000F6  FE C3				inc bl
 000000F8  88 18				mov [eax], bl
 000000FA  E9 00000109				jmp CodeLoop
					.ELSEIF al == '-'
 000000FF  E9 000000A1	   *	    jmp    @C0015
 00000104		   *@C0013:
 00000104  3C 2D	   *	    cmp    al, '-'
 00000106  75 15	   *	    jne    @C0016
 00000108  A1 00003071 R	          mov eax, [executeMemoryLocation]
 0000010D  8A 18		          mov bl, [eax]
 0000010F  FE CB		          dec bl
 00000111  88 18		          mov[eax], bl
 00000113  E9 000000F0		          jmp CodeLoop
					.ELSEIF al == '.'
 00000118  E9 00000088	   *	    jmp    @C0018
 0000011D		   *@C0016:
 0000011D  3C 2E	   *	    cmp    al, '.'
 0000011F  75 14	   *	    jne    @C0019
 00000121  8B 1D 00003071 R	          mov ebx, executeMemoryLocation
 00000127  8A 03				mov al, [ebx]
 00000129  E8 00000000 E			call WriteChar
 0000012E  E9 000000D5				jmp CodeLoop
				     .ELSEIF al == ','
 00000133  EB 70	   *	    jmp    @C001B
 00000135		   *@C0019:
 00000135  3C 2C	   *	    cmp    al, ','
 00000137  75 19	   *	    jne    @C001C
 00000139  E8 00000000 E	          call ReadChar
 0000013E  E8 00000000 E			  call writechar
 00000143  8B 1D 00003071 R	          mov ebx, executeMemoryLocation
 00000149  88 03		          mov[ebx], al
 0000014B  E9 000000B8		          jmp CodeLoop
					.ELSEIF al == '['
 00000150  EB 53	   *	    jmp    @C001E
 00000152		   *@C001C:
 00000152  3C 5B	   *	    cmp    al, '['
 00000154  75 35	   *	    jne    @C001F
 00000156  8B 1D 00003075 R			mov ebx, [codeLocation]
 0000015C  43					inc ebx
 0000015D  89 1D 00003075 R	          mov [codeLocation], ebx
 00000163  8A 03		          mov al, [ebx]
 00000165  3C 5D				cmp al, ']'      ; nothing in while loop
 00000167  0F 84 0000009B			je CodeLoop
						
 0000016D  A1 00003071 R	          mov eax, [executeMemoryLocation]
 00000172  8A 18		          mov bl, [eax]
 00000174  80 FB 00		          cmp bl, 0        ; jump out of while loop
 00000177  74 2C		          je FindEndWhile

 00000179  8B 1D 00003075 R	          mov ebx, [codeLocation]
 0000017F  4B			          dec ebx          ; decrease the addtional increasement
 00000180  53			          push ebx         ; push while loop instruction
 00000181  89 1D 00003075 R	          mov [codeLocation], ebx
 00000187  EB 7F				jmp CodeLoop
					.ELSEIF al == ']'
 00000189  EB 1A	   *	    jmp    @C0021
 0000018B		   *@C001F:
 0000018B  3C 5D	   *	    cmp    al, ']'
 0000018D  75 16	   *	    jne    @C0022
 0000018F  8B 1D 00003071 R			mov ebx, [executeMemoryLocation]
 00000195  8A 03		          mov al, [ebx]
 00000197  3C 00				cmp al, 0        ; jump out while loop
 00000199  74 6A				je PopCode
						
 0000019B  5B					pop ebx
 0000019C  89 1D 00003075 R			mov codeLocation, ebx
 000001A2  53					push ebx
 000001A3  EB 63				jmp CodeLoop
					.ENDIF
 000001A5		   *@C0022:
 000001A5		   *@C0021:
 000001A5		   *@C001E:
 000001A5		   *@C001B:
 000001A5		   *@C0018:
 000001A5		   *@C0015:
 000001A5		   *@C0012:
 000001A5		   *@C000F:
 000001A5		   *@C000C:

 000001A5			FindEndWhile:           ; find end of while loop character ']'
 000001A5  C6 05 00003079 R		mov [whileCheck], 1 ; initialize whileCheck=1
	   01
					
 000001AC				Loop2:
 000001AC  8B 1D 00003075 R			mov ebx, [codeLocation]
 000001B2  8A 03		          mov al, [ebx]
						.IF al == 0         ; if codeLocation = end of file(which initialized = 0)
 000001B4  0A C0	   *	    or	al, al
 000001B6  75 13	   *	    jne    @C0024
 000001B8  BA 0000307A R				mov edx, OFFSET whileError
 000001BD  E8 00000000 E				call WriteString
 000001C2  E8 00000000 E				call Crlf
 000001C7  EB 51		               jmp Return
						.ELSEIF al == '['   ; if codeLocation = '[', whileCheck = whileCheck +1
 000001C9  EB 2B	   *	    jmp    @C0026
 000001CB		   *@C0024:
 000001CB  3C 5B	   *	    cmp    al, '['
 000001CD  75 10	   *	    jne    @C0027
 000001CF  8A 1D 00003079 R	               mov bl, [whileCheck]
 000001D5  FE C3		               inc bl
 000001D7  88 1D 00003079 R	               mov [whileCheck], bl
						.ELSEIF al == ']'
 000001DD  EB 17	   *	    jmp    @C0029
 000001DF		   *@C0027:
 000001DF  3C 5D	   *	    cmp    al, ']'
 000001E1  75 13	   *	    jne    @C002A
 000001E3  8A 1D 00003079 R				mov bl, [whileCheck]
 000001E9  80 FB 01					cmp bl, 1       ; if codeLocation = ']' and whileCheck = 1, find the right ']'
 000001EC  74 1A					je CodeLoop
 000001EE  FE CB					dec bl          ; if codeLocation = ']' and whileCheck = 1, find the wrong ']', whileCheck = whileCheck -1
 000001F0  88 1D 00003079 R				mov [whileCheck], bl
						.ENDIF
 000001F6		   *@C002A:
 000001F6		   *@C0029:
 000001F6		   *@C0026:
 000001F6				Loop2EndIf:
 000001F6  8B 1D 00003075 R			mov ebx, [codeLocation]
 000001FC  43					inc ebx
 000001FD  89 1D 00003075 R			mov [codeLocation], ebx
 00000203  EB A7				jmp Loop2
						
 00000205			PopCode:
 00000205  5B				pop ebx
 00000206  EB 00			jmp CodeLoop
 00000208			CodeLoop:
 00000208  8B 1D 00003075 R		mov ebx, [codeLocation]
 0000020E  43			     inc ebx
 0000020F  89 1D 00003075 R		mov [codeLocation], ebx
 00000215  E9 FFFFFE86			jmp Loop1
 0000021A			Return:
 0000021A  C3				ret
 0000021B			BFInterpret endp


 0000021B			main proc
					
 0000021B  E8 FFFFFE3C			call ReadFileName
 00000220  BA 00000054 R		mov edx, OFFSET buffer
 00000225  E8 FFFFFDD6			call SyntaxCheck
 0000022A  BA 00001058 R		mov edx, OFFSET AfterSyntaxCheck
 0000022F  E8 FFFFFE5C			call BFInterpret
 00000234  E8 00000000 E		call crlf
 00000239  E8 00000000 E	    call WaitMsg
					invoke ExitProcess,0
 0000023E  6A 00	   *	    push   +000000000h
 00000240  E8 00000000 E   *	    call   ExitProcess
 00000245			main endp
				end main
Microsoft (R) Macro Assembler Version 14.14.26430.0	    06/10/18 23:41:13
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000308E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000245 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

BFInterpret  . . . . . . . . . .	P Near	 00000090 _TEXT	Length= 0000018B Public STDCALL
  Loop1  . . . . . . . . . . . .	L Near	 000000A0 _TEXT	
  FindEndWhile . . . . . . . . .	L Near	 000001A5 _TEXT	
  Loop2  . . . . . . . . . . . .	L Near	 000001AC _TEXT	
  Loop2EndIf . . . . . . . . . .	L Near	 000001F6 _TEXT	
  PopCode  . . . . . . . . . . .	L Near	 00000205 _TEXT	
  CodeLoop . . . . . . . . . . .	L Near	 00000208 _TEXT	
  Return . . . . . . . . . . . .	L Near	 0000021A _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFileName . . . . . . . . . .	P Near	 0000005C _TEXT	Length= 00000034 Public STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SyntaxCheck  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000005C Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000014 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000037 _TEXT	
  InValid  . . . . . . . . . . .	L Near	 00000043 _TEXT	
  Err  . . . . . . . . . . . . .	L Near	 00000051 _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 0000021B _TEXT	Length= 0000002A Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
AfterSyntaxCheck . . . . . . . .	Byte	 00001058 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
ErrMsg . . . . . . . . . . . . .	Byte	 00002060 _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX  . . . . . . . . . . . . . .	Number	 00001000h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
ValidCharacter . . . . . . . . .	Byte	 00002058 _DATA	
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000054 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00001054 _DATA	
codeLocation . . . . . . . . . .	DWord	 00003075 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
executeMemoryLocation  . . . . .	DWord	 00003071 _DATA	
executeMemory  . . . . . . . . .	Byte	 00002071 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileName . . . . . . . . . . . .	Byte	 00000004 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputHandle  . . . . . . . . . .	DWord	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
whileCheck . . . . . . . . . . .	Byte	 00003079 _DATA	
whileError . . . . . . . . . . .	Byte	 0000307A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
